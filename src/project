const inquirer = require('inquirer');
const fse = require('fs-extra');
const download = require('download-git-repo');
const { TEMPLATE_GIT_REPO, INJECT_FILES } = require('./constants');
const chalk = require('chalk');
const ora = require('ora');
const path = require('path');
const memFs = require('mem-fs');
const editor = require('mem-fs-editor');
const { getDirFileName } = require('./utils');
const { exec } = require('child_process');

function Project(options) {
	this.config = Object.assign({
		projectName: '',
		description: ''
	}, options);
	const store = memFs.create();
	this.memFsEditor = editor.create(store);
}

Project.prototype.create = function() {
	this.inquire()
		.then((answer) => {
			this.config = Object.assign(this.config, answer);
			this.generate();
		});
};

Project.prototype.inquire = function() {
	const prompts = [];
	const { projectName, description } = this.config;
	if (typeof projectName !== 'string') {
		prompts.push({
			type: 'input',
			name: 'projectName',
			message: '请输入项目名：',
			validate(input) {
				if (!input) {
					return '项目名不能为空';
				}
				if (fse.existsSync(input)) {
					return '当前目录已存在同名项目，请更换项目名';
				}
				return true;
			}
		});
	} else if (fse.existsSync(projectName)) {
		prompts.push({
			type: 'input',
			name: 'projectName',
			message: '当前目录已存在同名项目，请更换项目名',
			validate(input) {
				if (!input) {
					return '项目名不能为空';
				}
				if (fse.existsSync(input)) {
					return '当前目录已存在同名项目，请更换项目名';
				}
				return true;
			}
		});
	}

	if (typeof description !== 'string') {
		prompts.push({
			type: 'input',
			name: 'description',
			message: '请输入项目描述'
		});
	}

	return inquirer.prompt(prompts);
};

/**
 * 模板替换
 * @param {string} source 源文件路径
 * @param {string} dest 目标文件路径
 * @param {object} data 替换文本字段
 */
Project.prototype.injectTemplate = function(source, dest, data) {
	this.memFsEditor.copyTpl(
		source,
		dest,
		data
	);
}

Project.prototype.generate = function() {
	const { projectName, description } = this.config;
	const projectPath = path.join(process.cwd(), projectName);
	const downloadPath = path.join(projectPath, '__download__');

	const downloadSpinner = ora('🚀  Downloading template...');
	downloadSpinner.start();
	// 下载git repo
	download(TEMPLATE_GIT_REPO, downloadPath, { clone: true }, (err) => {
		if (err) {
			downloadSpinner.color = 'red';
			downloadSpinner.fail(err.message);
			return;
		}

		downloadSpinner.color = 'green';
		downloadSpinner.succeed('🎉  Download Success');

		// 复制文件
		const copyFiles = getDirFileName(downloadPath);

		copyFiles.forEach((file) => {
			fse.copySync(path.join(downloadPath, file), path.join(projectPath, file));
			console.log(`${chalk.green('✔ ')}${chalk.grey(`Create: ${projectName}/${file}`)}`);
		});

		INJECT_FILES.forEach((file) => {
			this.injectTemplate(path.join(downloadPath, file), path.join(projectName, file), {
				projectName,
				description
			});
		});

		this.memFsEditor.commit(() => {
			INJECT_FILES.forEach((file) => {
				console.log(`🚚 ${chalk.grey(`Create: ${projectName}/${file}`)}`);
			})

			fse.remove(downloadPath);

			process.chdir(projectPath);

			// git 初始化
			console.log();
			const gitInitSpinner = ora(`⚓ git init`);
			gitInitSpinner.start();

			const gitInit = exec('git init');
			gitInit.on('close', (code) => {
				if (code === 0) {
					gitInitSpinner.color = 'green';
					gitInitSpinner.succeed(gitInit.stdout.read());
				} else {
					gitInitSpinner.color = 'red';
					gitInitSpinner.fail(gitInit.stderr.read());
				}

				// 安装依赖
				console.log();
				const installSpinner = ora(`🗃 Installing dependency. This might take a while...`);
				installSpinner.start();
				exec('npm install', (error, stdout, stderr) => {
					if (error) {
						installSpinner.color = 'red';
						installSpinner.fail(chalk.red('🔗 Dependency installed, please try again.'));
						console.log(error);
					} else {
						installSpinner.color = 'green';
						installSpinner.succeed('🎉 Dependency installed success.');
						console.log(`${stderr}${stdout}`);
						console.log(chalk.default(`🎉  Successfully created project ${chalk.yellow(projectName)}`));
						console.log(chalk.default(`👉  Get started with the following commands:`));
						console.log();
						console.log(chalk.cyan(` ${chalk.gray('$')} cd ${projectName}`));
						console.log(chalk.cyan(` ${chalk.gray('$')} npm start`));
					}
				})
			})
		});
	});
}

module.exports = Project;
